Disclaimer:

You can use these instructions and DTS changes however you wish, however I cannot take any responsibility for any damage to your board, loss of data, or inconveniences suffered due to the use of this freely available information.

Description:

This is a workable kernel for my Firefly-RK3399 (2GB variant).

I had to make both fan53555 and pwm-regulator modules (instead of built-ins) for this kernel, as the default DTS supplied with the mainline kernel I used seemed to cause hangs when these two drivers were loaded on boot.

I ended up comparing the rk3399-firefly.dts against a decompiled one from the eMMC, and from the firefly tree here: https://gitlab.com/TeeFirefly/linux-kernel/blob/gitlab/firefly/arch/arm64/boot/dts/rockchip/rk3399-firefly-linux.dts

I found a couple of things related to the fan53555 regulator, and pwm-regulator that I thought looked a bit odd, so I made some small changes. Surprisingly, this seems to have worked, as I can now load fan53555 and pwm-regulator on the Firefly-RK3399 (2GB) without it hanging.

Note that the fan53555 module is required for the cpufreq_dt module to be able to function.

I've included the dts file I used in this directory.

I had some hangs on bootup before enabling the parameter 'clk_ignore_unused' but to be honest I am not 100% certain it is still required after the DTS changes. I've left it there anyway as it doesn't seem to have caused any harm.

Note: I compiled a linux-rockchip kernel from kernel.org with tag v4.16 with this config.

Files in this directory:
* rk3399-firefly.dts  (patched version of mainline DTS that seems to fix hangs with fan53555 and pwm-regulator modules, at least on my firefly).
* rsc-custom-patches.img  (resource image, to be flashed at offset 32768. Contains compiled DTB of rk3399-firefly.dts, renamed to rk-kernel.dtb, also contains 'logo.bmp' purely because the existing resource image I unpacked had it, so thought the firefly might expect it).
* config  (kernel config for linux-rockchip tags/v4.16 that works with my firefly)
* rk3399-firefly.patch  (this is the patch file that should apply to the original rk3399-firefly.dts in the mainline kernel, note: this is ALREADY APPLIED to the rk3399-firefly.dts file in this directory).

Pre-reqs:

If you have a newly shipped Firefly board, you'll need to make sure the image on your eMMC is a new enough version that it will attempt to boot from the SD before falling back to the eMMC.

I flashed the image from the Firefly Google Drive download known as: Firefly-RK3399-ubuntu16.04-20180416112819.tgz to my eMMC before creating and booting from this SDCard image. This image seemed to enable SDCard booting. I would assume newer images do as well, but I have not tested them.

You can find this image from Firefly:
1) Go to the firefly firmware download page for RK3399: http://en.t-firefly.com/doc/download/3.html
2) Click download on 'Ubuntu 16.04 image', select 'Official'
3) It will take you to Google Drive. 
4a) Choose an image, OR if you want the exact image I used for eMMC, click 'Ubuntu16.04'
4b) Then select the 201804 xubuntu image to download.

You will also need the rkbin upgrade_tool (mentioned in link below). 

Instructions for flashing can be found here: http://wiki.t-firefly.com/en/Firefly-RK3399/flash-image.html
Or here: http://bbs.t-firefly.com/forum.php?mod=viewthread&tid=2294

Instructions to create the bootable SDCard with newer kernel:
#Get rkbin and get your kernel and extract it
mkdir rk3399
cd rk3399
git clone https://github.com/rockchip-linux/rkbin.git
wget https://git.kernel.org/pub/scm/linux/kernel/git/mmind/linux-rockchip.git/snapshot/linux-rockchip-4.16.tar.gz
tar -xvf linux-rockchip-4.16.tar.gz
cd linux-rockchip-4.16

#Get the config
wget -O .config https://github.com/VenKamikaze/firefly-rk3399-build/raw/master/kernel/configs/working-4.16-rockchip/config

#Get the DTS
wget https://github.com/VenKamikaze/firefly-rk3399-build/raw/master/kernel/configs/working-4.16-rockchip/rk3399-firefly.dts
mv -vf rk3399-firefly.dts arch/arm64/boot/dts/rockchip/

#Compile everything
export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-
make -j4 all

# Install the modules under a subdir for later use
mkdir build-${ARCH}-modules
make INSTALL_MOD_PATH=build-${ARCH}-modules INSTALL_MOD_STRIP=1 modules_install

../rkbin/tools/mkkrnlimg arch/arm64/boot/Image kernel-$(date +%F).img

#Optionally, pack your own resource image (or just use rsc-custom-patches.img in this repo)
cd ..
mkdir newresource
cd newresource
cp ../linux-rockchip-4.16/arch/arm64/boot/dts/rockchip/rk3399-firefly.dtb ./rk-kernel.dtb
#Note: logo.bmp is not included here, probably doesn't matter but pointing it out just incase.
../rkbin/tools/resource_tool --pack --image=../new-resource.img *
cd ..

# Get the firefly-rk3399 provided SDCard image as a base (because I can just be lazy and modify it as needed). You might need a web browser to get this one: https://drive.google.com/file/d/0B7HO8lbGgAqAR3FVYzAxbW5EMTg/view

#Extract it:
7z x Firefly-rk3399_xubuntu1604_SD_201705151725.7z

# Flash our new parts over it
dd if=new-resource.img of=Firefly-rk3399_xubuntu1604_SD_201705151725.img seek=32768 conv=notrunc,fsync
KRNLIMG=kernel-$(date +%F).img
dd if=linux-rockchip-4.16/"$KRNLIMG" of=Firefly-rk3399_xubuntu1604_SD_201705151725.img seek=65536 conv=notrunc,fsync

# We're still not done, we need to flash new kernel parameters. I believe these are checksummed, somehow, as I could not directly modify the hex values for these and re-flash, so we have to force incorrect parameters onto the SDCard image, and then boot it. This will put us into rockusb mode, and allow us to use the 'upgrade_tool' from rockchip to flash new parameters.

#Flash the dodgy parameters to the SDCard to force rockusb mode on bootup:
wget https://github.com/VenKamikaze/firefly-rk3399-build/raw/master/compiled/kill-params-force-rockusb
dd if=kill-params-force-rockusb of=Firefly-rk3399_xubuntu1604_SD_201705151725.img seek=8192 conv=notrunc,fsync

#Flash the Firefly-rk3399 img to your SDCard:
sudo dd if=Firefly-rk3399_xubuntu1604_SD_201705151725.img of=/dev/YOUR_DEVICE_HERE bs=1M conv=fsync

#Download the rockchip "upgrade_tool" which will let you reflash new params
wget http://dl.radxa.com/rock/tools/linux/Linux_Upgrade_Tool_v1.21.zip
#Note: I had v1.26, but I don't know where I got it from. Hopefully this one works.
unzip Linux_Upgrade_Tool_v1.21.zip

# Put the SDCard into your powered off RK3399, with your USB cable connected to the serial debug, then power it on. Use minicom with baud 1500000n8 to access it.
# It should be in rockusb mode.

# Now back on your PC, continuing where we left off:
# Get the parameters we want to use
wget https://github.com/VenKamikaze/firefly-rk3399-build/raw/master/kernel/configs/working-4.16-rockchip/parameter_gpt.txt

# Now use the rockchip upgrade tool
./upgrade_tool
# select the device, probably '1'
# You should see a prompt now 'Rockusb>'
# Write the new params:
DI -p parameter_gpt.txt
# It should have successfully written them. If so, reboot with 'rd':
rd

# Your board should now be attempting to boot.
# Note: I had a hang using the default xubuntu rootfs, but it didn't bother me, as I switched it to the ArchLinux ARM (GRU) rootfs.
# You also still need to copy your kernel modules to the rootfs. Let's assume it's mounted at /run/media/someuser/root/
rsync -av linux-rockchip-4.16/build-${ARCH}-modules/lib/modules/* /run/media/someuser/root/lib/modules/
sync

# It should now be bootable.
